name: 'PR Analyser'

on:
  pull_request:
    branches:
      - master

jobs:
  terraform:
    name: 'Analyse PR Changes with AI'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get PR Files
        id: pr_files
        run: |
          PR_FILES=$(curl -s "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            | jq -r '.[].filename' | paste -sd "," -)
          echo "PR_FILES=$PR_FILES" >> $GITHUB_ENV
          
          LATEST_COMMIT=$(curl -s "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/commits" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            | jq -r '.[-1].sha')
          echo "LATEST_COMMIT=$LATEST_COMMIT" >> $GITHUB_ENV

      - name: Analyze Each File
        env:
          COMMENTS_URL: ${{ github.event.pull_request.comments_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OLLAMA_MODEL: ${{ vars.OLLAMA_MODEL }}
          PR_FILES: ${{ env.PR_FILES }}
        run: |
          echo "Processing files: $PR_FILES"
          IFS=',' read -ra FILES_ARRAY <<< "$PR_FILES"
          for FILE in "${FILES_ARRAY[@]}"; do
            PATCH=$(curl -s "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files" \
              -H "Authorization: token $GITHUB_TOKEN" \
              | jq -r --arg FILE "$FILE" '.[] | select(.filename == $FILE) | .patch')

            echo "PATCH response for $FILE: $PATCH"
          
            EXTENSION="${FILE##*.}"
            case "$EXTENSION" in
              js)
                LANGUAGE="JavaScript"
                ;;
              ts)
                LANGUAGE="TypeScript"
                ;;
              py)
                LANGUAGE="Python"
                ;;
              *)
                LANGUAGE="Unknown"
                ;;
            esac

            if [ "$LANGUAGE" != "Unknown" ] && [ -n "$PATCH" ]; then
              INSTRUCTION="Analyze the $LANGUAGE code changes, identify any errors or inefficiencies in the resulting code, and provide corrected or improved code if applicable. Code:\n\n$PATCH"

              REQUEST_BODY=$(jq -n --arg model "$OLLAMA_MODEL" \
                                    --arg prompt "$INSTRUCTION" \
                                    '{
                                      model: $model,
                                      prompt: $prompt,
                                      options: { temperature: 0.7 },
                                      reset: true,
                                      stream: false
                                    }')

              # Print the REQUEST_BODY before sending it
              echo "Request Body to be sent: $REQUEST_BODY"

              RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
                -H "Content-Type: application/json" \
                -d "$REQUEST_BODY" \
                https://ai-agent-yz.rpplabs.com/api/generate)

              HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
              RESPONSE_BODY=$(echo "$RESPONSE" | head -n-1)

              if [ "$HTTP_STATUS" -eq 200 ]; then
                COMMENT_BODY=$(echo "$RESPONSE_BODY" | jq -r '.response')
              else
                COMMENT_BODY="AI agent encountered an issue analyzing $FILE."
              fi
          
              POSITION=1  # Update logic to calculate actual diff positions

              # Call GitHub API to post a comment
              curl -X POST \
                -H "Authorization: Bearer $GITHUB_TOKEN" \
                -H "Accept: application/vnd.github.v3+json" \
                -d "$(jq -n --arg body "$COMMENT_BODY" \
                          --arg path "$FILE" \
                          --arg commit_id "$LATEST_COMMIT" \
                          --argjson position $POSITION \
                          '{body: $body, path: $path, commit_id: $commit_id, position: $position}')" \
                "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/comments"
            else
              echo "No patch data available for $FILE."
            fi
          done
